<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jacob2359</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://JacobLei.github.io/"/>
  <updated>2019-05-09T14:38:04.043Z</updated>
  <id>http://JacobLei.github.io/</id>
  
  <author>
    <name>jacob2359</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode-2 两数相加</title>
    <link href="http://JacobLei.github.io/2019/05/09/LeetCode-2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>http://JacobLei.github.io/2019/05/09/LeetCode-2-两数相加/</id>
    <published>2019-05-09T14:33:36.000Z</published>
    <updated>2019-05-09T14:38:04.043Z</updated>
    
    <content type="html"><![CDATA[<ul><li>题目：2. 两数相加</li><li>难度：中等</li><li>分类：链表</li><li>解决方案：链表的遍历</li></ul><a id="more"></a><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode-cn.com/problems/add-two-numbers/" target="_blank" rel="noopener">题目描述</a></h1><p>给出两个<strong>非空</strong>的链表用来表示两个非负的整数。其中，它们各自的位数是按照<strong>逆序</strong>的方式存储的，并且它们的每个节点只能存储<strong>一位</strong>数字。<br>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。<br>注意：您可以假设除了数字0之外，这两个数都不会以0开头。</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;题目：2. 两数相加&lt;/li&gt;
&lt;li&gt;难度：中等&lt;/li&gt;
&lt;li&gt;分类：链表&lt;/li&gt;
&lt;li&gt;解决方案：链表的遍历&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://JacobLei.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://JacobLei.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>[spring实战]1-自动化装配bean</title>
    <link href="http://JacobLei.github.io/2019/05/04/spring%E5%AE%9E%E6%88%981-%E8%87%AA%E5%8A%A8%E5%8C%96%E8%A3%85%E9%85%8Dbean/"/>
    <id>http://JacobLei.github.io/2019/05/04/spring实战1-自动化装配bean/</id>
    <published>2019-05-04T14:16:38.000Z</published>
    <updated>2019-05-04T15:33:28.277Z</updated>
    
    <content type="html"><![CDATA[<p>Spring提供三种主要的装备机制：</p><ul><li>在XML中进行显示配置</li><li>在Java中进行显示配置</li><li>隐式的bean发现机制和自动配置</li></ul><p>本章主要学习<strong>隐式的bean发现机制和自动配置</strong>，通过<strong>音响系统</strong>的各个组件来说明<code>Spring</code>是如何隐式的bean发现机制和自动配置。首先创建一个<code>CD</code>接口，<code>Spring</code>会发现它并将其创建一个<code>bean</code>；然后会创建一个<code>CDPlayer</code>类，让<code>Spring</code>发现它并将<code>CD bean</code>注入进来。</p><a id="more"></a><p><code>Spring</code>从两个角度来实现自动化装备：</p><ul><li>组件扫描(component scanning)：<code>Spring</code>会自动发现<code>ApplicationContext</code>中所创建的<code>bean</code></li><li>自动装配(autowiring)：<code>Spring</code>自动满足<code>bean</code>之间的依赖</li></ul><h1 id="创建bean"><a href="#创建bean" class="headerlink" title="创建bean"></a>创建<code>bean</code></h1><h2 id="创建CD接口和PianoCD类"><a href="#创建CD接口和PianoCD类" class="headerlink" title="创建CD接口和PianoCD类"></a>创建<code>CD</code>接口和<code>PianoCD</code>类</h2><p>首先创建<code>CD</code>接口，具体代码如下所示：<br><code>CD.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jacob;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CD</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>CD</code>中不需要具体实现，它只需要定义所能进行的操作，其具体实现类根据具体需求创建。如现在有个钢琴CD的具体实现<code>PianoCD</code>，其代码如下所示：<br><code>PianoCD.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jacob;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PianoCD</span> <span class="keyword">implements</span> <span class="title">CD</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"this is PianoCD!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建<code>PianoCD</code>类是，使用了<code>@Component</code>注解，该注解表明<code>PianoCD</code>类会作为<strong>组件类</strong>，并告知<code>Spring</code>为这个类创建<code>bean</code>，因此不需要显示配置<code>bean</code>。</p><h2 id="开启组件扫描"><a href="#开启组件扫描" class="headerlink" title="开启组件扫描"></a>开启组件扫描</h2><p>组件扫描(ComponentScan)默认是关闭的，需要显示的配置<code>Spring</code>，命令它去寻找带有了<code>@Component</code>注解的类，并为其创建<code>bean</code>。具体代码如下所示：<br><code>CDPlayerConfig.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jacob;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>CDPlayerConfig</code>类通过<code>java</code>代码定义了<code>Spring</code>的装配规则。该类中没有任何显示地声明任何<code>bean</code>，通过使用<code>@ComponentScan</code>注解来开启组件扫描。<code>@ComponentScan</code>注解默认会扫描与配置类相同的包。因为<code>CDPlayerConfig</code>在<code>com.jacob</code>包中，因此<code>Spring</code>将扫描该包以及该包下所有子包，查找带有<code>@Component</code>的类，然后为该类在<code>Spring</code>中自动创建一个<code>bean</code>。</p><h2 id="测试组件扫描功能"><a href="#测试组件扫描功能" class="headerlink" title="测试组件扫描功能"></a>测试组件扫描功能</h2><p>创建<code>JUnit</code>测试，它会创建<code>Spring</code>的<code>Context</code>，并判断<code>CD</code>是不是真的创建出来。具体代码如下所示：<br><code>CDPlayerTest.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jacob;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertNotNull;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(classes = CDPlayerConfig.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CD cd;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cdShouldNotBeNull</span><span class="params">()</span></span>&#123;</span><br><span class="line">        assertNotNull(cd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>CDPlayerTest</code>使用<code>Spring</code>的<code>SpringJUnit4ClassRunner</code>，以便在测试开始的时候自动创建<code>Spring</code>的<code>ApplicationContext</code>。<code>@ContextConfiguration</code>会告诉<code>CDPlayerTest</code>在需要在<code>CDPlayerConfig</code>中加载配置。因为<code>CDPlayerConfig</code>中包含<code>@ComponentScan</code>，因此最终的<code>ApplicationContext</code>包含<code>CD bean</code>。</p><p>为了证明<code>ApplicationContext</code>包含<code>CD bean</code>， 在测试代码中使用<code>CD</code>类型的属性，且在这个属性中添加<code>@Autowired</code>注解，以便将<code>CD</code>注入到测试代码中。最后通过断言判断<code>cd</code>属性不为<code>null</code>。</p><blockquote><p>注意：在创建测试代码过程中，出现如图问题：<img src="/2019/05/04/spring实战1-自动化装配bean/CDPlayerTest错误.png" title="CDPlayerTest错误示意图"><br>图中的主要原因是<code>junit</code>的版本过低，在<code>pom.xml</code>文件中<code>junit</code>依赖的改为4.12及其以上即可。</p></blockquote><img src="/2019/05/04/spring实战1-自动化装配bean/CDPlayerTest测试通过.png" title="CDPlayerTest测试通过示意图"><h1 id="为组件扫描的bean命名"><a href="#为组件扫描的bean命名" class="headerlink" title="为组件扫描的bean命名"></a>为组件扫描的bean命名</h1><p><code>Spring</code>中的<code>ApplicationContext</code>所有的<code>bean</code>都会有一个<code>ID</code>。如<code>PianoCD</code>中我们没有设置其对应<code>bean</code>的<code>ID</code>，这时<code>Spring</code>会默认指定其<code>ID</code>为<code>pianoCD</code>。有些情况，我们需要自定义<code>bean</code>的<code>ID</code>，可以通过<code>@Component</code>注解来实现，具体如下代码所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"myLoveCD"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PianoCD</span> <span class="keyword">implements</span> <span class="title">CD</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="设置组件扫描-ComponentScan-的基础包"><a href="#设置组件扫描-ComponentScan-的基础包" class="headerlink" title="设置组件扫描(@ComponentScan)的基础包"></a>设置组件扫描(<code>@ComponentScan</code>)的基础包</h1><p><code>@ComponentScan</code>默认情况下扫描配置类所在的包（基础包，base package）中的组件，有时需要扫描不同的包，有时需要扫描多个包，该如何处理？<br>为了将配置代码与应用代码分离开，一般配置类单独放<code>config</code>包中，这时需要我们明确设置基础包，可以通过指定<code>@ComponentScan</code>中的<code>value</code>属性值来设置需要扫描的基础包。具体代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(value=<span class="string">"com.jacob"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果需要扫描多个包，具体代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages=&#123;<span class="string">"package1"</span>, <span class="string">"package2"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="通过为bean添加注解实现自动装配"><a href="#通过为bean添加注解实现自动装配" class="headerlink" title="通过为bean添加注解实现自动装配"></a>通过为<code>bean</code>添加注解实现自动装配</h1><p>自动装配是让<code>Spring</code>自动满足<code>bean</code>依赖的一种方法，在满足依赖的过程中，会在<code>ApplicationContext</code>中寻找匹配某个<code>bean</code>需要的其他<code>bean</code>。一般是通过<code>@Autowired</code>注解来实现自动装配。如下代码所示：<br><code>CDPlayer.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jacob;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayer</span> <span class="keyword">implements</span> <span class="title">MediaPlayer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CD cd;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CDPlayer</span><span class="params">(CD cd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cd = cd;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cd.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>CDPlayer</code>中在构造器上添加<code>@Autowired</code>注解，表明当<code>Spring</code>创建<code>CDPlayer bean</code>时，会通过这个构造器来进行实例化并且会传入<code>CD</code>类型的<code>bean</code>。<br><code>@Autowired</code>注解类可以在任何方法上使用。例如<code>CDPlayer</code>有一个<code>setCD()</code>方法，那么可以采用如下的注解形式进行自动装配：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@`<span class="meta">@Autowired</span>`</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCD</span><span class="params">(CD cd)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.cd = cd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在自动装配时，如果没有匹配的<code>bean</code>，那么在创建<code>ApplicationContext</code>时会抛异常。可以通过<code>@Autowired(required=false)</code>来避免抛异常，这时<code>Spring</code>将这个<code>bean</code>置为未装配状态。在代码中需要进行<code>null</code>检查来判断<code>bean</code>是否装配成功。如果没有<code>null</code>检查，未装配的<code>bean</code>会抛出<code>NullPointerException</code>。</p><h1 id="验证自动装配"><a href="#验证自动装配" class="headerlink" title="验证自动装配"></a>验证自动装配</h1><p>我们在<code>CDPlayer</code>中在构造器上添加<code>@Autowired</code>注解，<code>Spring</code>会将一个可分配的<code>CD</code>类型的<code>bean</code>自动注入进来（该实验项目中为<code>PianoCD bean</code>）。接下来测试是否注入成功，修改<code>CDPlayerTest</code>如下所示:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jacob;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Rule;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.contrib.java.lang.system.StandardOutputStreamLog;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertEquals;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertNotNull;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(classes = CDPlayerConfig.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> StandardOutputStreamLog log = <span class="keyword">new</span> StandardOutputStreamLog();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MediaPlayer player;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CD cd;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cdShouldNotBeNull</span><span class="params">()</span></span>&#123;</span><br><span class="line">        assertNotNull(cd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        player.play();</span><br><span class="line">        assertEquals(</span><br><span class="line">                <span class="string">"this is PianoCD!!!"</span>,</span><br><span class="line">                log.getLog());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><img src="/2019/05/04/spring实战1-自动化装配bean/验证自动装配测试结果.png" title="验证自动装配测试结果示意图"><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://item.jd.com/11899370.html" target="_blank" rel="noopener">Spring实战（第四版）</a></p><blockquote><p>声明：本文为学习《Spring实战（第四版）》所作学习笔记，一切版权归该书所有。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring提供三种主要的装备机制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在XML中进行显示配置&lt;/li&gt;
&lt;li&gt;在Java中进行显示配置&lt;/li&gt;
&lt;li&gt;隐式的bean发现机制和自动配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本章主要学习&lt;strong&gt;隐式的bean发现机制和自动配置&lt;/strong&gt;，通过&lt;strong&gt;音响系统&lt;/strong&gt;的各个组件来说明&lt;code&gt;Spring&lt;/code&gt;是如何隐式的bean发现机制和自动配置。首先创建一个&lt;code&gt;CD&lt;/code&gt;接口，&lt;code&gt;Spring&lt;/code&gt;会发现它并将其创建一个&lt;code&gt;bean&lt;/code&gt;；然后会创建一个&lt;code&gt;CDPlayer&lt;/code&gt;类，让&lt;code&gt;Spring&lt;/code&gt;发现它并将&lt;code&gt;CD bean&lt;/code&gt;注入进来。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://JacobLei.github.io/categories/Spring/"/>
    
      <category term="Spring in action" scheme="http://JacobLei.github.io/categories/Spring/Spring-in-action/"/>
    
    
      <category term="Spring" scheme="http://JacobLei.github.io/tags/Spring/"/>
    
      <category term="Spring in action" scheme="http://JacobLei.github.io/tags/Spring-in-action/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-1 两数之和</title>
    <link href="http://JacobLei.github.io/2019/05/04/LeetCode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://JacobLei.github.io/2019/05/04/LeetCode-1-两数之和/</id>
    <published>2019-05-04T04:09:36.000Z</published>
    <updated>2019-05-09T14:34:24.914Z</updated>
    
    <content type="html"><![CDATA[<ul><li>题目：1. 两数之和</li><li>难度：简单</li><li>分类：数组，哈希表</li><li>解决方案：暴力求解、<code>HashMap</code></li></ul><a id="more"></a><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">题目描述</a></h1><p>给定一个整数数组<code>nums</code>和一个目标值<code>target</code>，请你在该数组中找出和为目标值的那 两个整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p><strong>两数之和</strong>可称为经典的面试题，曾经百度实习面试时手写过该代码，也在秋招电话面试时面到该题。这个题最基本的思路是使用两次<code>for</code>循环，但时间复杂度为<code>O(n^2)</code>，<code>java</code>代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = target - nums[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;nums.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j] == tmp &amp;&amp; j != i)&#123;</span><br><span class="line">                    res[<span class="number">0</span>] = i;</span><br><span class="line">                    res[<span class="number">1</span>] = j;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><img src="/2019/05/04/LeetCode-1-两数之和/两次for循环提交结果.jpg" title="两次for循环提交结果"><p>虽然在LeetCode或面试中能够解答出来，但是该方法的时间复杂度过高，需要进一步优化。我们发现题目中的数组是无序的（虽然示例中的数组有序的，但这只是一个特列，测试用例中并不是所有的数组都是有序的），当数组如果是<strong>有序</strong>的，然后再去查找是否能更加方便？一个很重要的问题，<strong>该题中需要返回的是数组下标，因此不能破坏数组中的位置关系</strong>。如果将数组进行排序，则会破坏数组的位置关系，不能满足题目要求。如何<strong>将数组的值与数组的位置关系进行绑定</strong>，是这个题目的解题关键。这样很容易想到<code>k-v</code>结构，在<code>java</code>中可以通过<code>HashMap</code>来实现。具体思路如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 遍历数组建立HashMap映射，其中HashMap中的key为数组的值，value为数组的位置，即&lt;nums[i], i&gt;;</span><br><span class="line">2. 查找是否存在两个数之和等于target：</span><br><span class="line">2.1 遍历数组，得到第一个数字nums[i]，记为num1，该数字在数组中的位置为i</span><br><span class="line">2.2 计算target-nums[i]，计算结果为另一个需要的数字num2，若该数字存在，该数字在数组中的位置为hasmMap.get(num2)</span><br><span class="line">2.3 在HashMap中判断num2是否存在：</span><br><span class="line">若不存在，则跳转至2.1</span><br><span class="line">若存在，则判断num1与num2对应的value是否相等：</span><br><span class="line">若相等，则跳转至2.1</span><br><span class="line">若不相等，则找到这两个数num1+num2==target，返回对应的数组位置</span><br></pre></td></tr></table></figure></p><p><code>java</code>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1. 建立HashMap映射</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 查找是否存在两个数之和等于target</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(tmp) &amp;&amp; map.get(tmp) != i)&#123;</span><br><span class="line">                res[<span class="number">0</span>] = i;</span><br><span class="line">                res[<span class="number">1</span>] = map.get(tmp);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><img src="/2019/05/04/LeetCode-1-两数之和/HashMap方法提交结果.jpg" title="HashMap方法提交结果"><p>整个算法流程是时间复杂度为<code>O(n)</code>，由于使用了<code>HashMap</code>申请了内存空间，其空间复杂度为<code>O(n)</code>。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">1. 两数之和</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;题目：1. 两数之和&lt;/li&gt;
&lt;li&gt;难度：简单&lt;/li&gt;
&lt;li&gt;分类：数组，哈希表&lt;/li&gt;
&lt;li&gt;解决方案：暴力求解、&lt;code&gt;HashMap&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://JacobLei.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://JacobLei.github.io/tags/LeetCode/"/>
    
  </entry>
  
</feed>
